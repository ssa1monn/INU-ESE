! 이중 포인터
: 포인터를 가리키는 포인터

int i = 100;
int *p = &i;
int **q = &p;

// 이중 포인터 프로그램 예제

#include <stdio.h>

void set_proverb(char* q) { // char** q
    static char* str1 = "A bird in the hand is worth two in the bush.";
    q = str1; // *q = str1;
}

int main(void) {
    char* s = "abcd";

    set_proverb(s); // &s
    printf("%s\n", s);

    return 0;
}

! 포인터 배열

malloc과 포인터를 이용한 일반적인 배열의 선언
int **          int *           int
m               m[0]            m[0][0] m[0][1] m[0][2] m[0][3]
                m[1]            m[1][0] m[1][1] m[1][2] m[1][3]
                m[2]            m[2][0] m[2][1] m[2][2] m[2][3]

포인터 배열 : 포인터를 모아서 배열로 만든 것
int a = 10, b = 20, c = 30, d = 40, e = 50;
int *pa[5] = { &a, &b, &c, &d, &e };

char *fruits[] = {
    "apple",
    "blueberry",
    "orange",
    "melon"
}

다음 값들은 무엇일까?
fruits
&fruits
&fruits[0]
fruits[0]
fruits[0][0]

다음은 가능하겠는가?
fruits[0] = "xyz"; // 가능하다
fruits[0][1] = "xyz"; // 불가능함.
fruits[1][2] = 'X'; // 불가능함. blueberry에서 3번쨰 글자 u를 가리키지만, 텍스트 공간에 존재.

char fname[][10] = {
    "apple",
    "blueberry",
    "orange",
    "melon"
};
다음은 공간의 낭비가 일어남.
반면, fname[0][0] = 'X'; 가 가능함.

char** p;
p = fname[0]; // 문제가 있을까?
p는 이중포인터임. 즉, fname[0] 으로 가서 있는 나머지 a, p, p, l, e 전부 주소값으로 생각함.
p = fname; // 문제가 있을까?


p = fruits[0]; // 문제가 있을까?
p는 이중포인터임. 즉, fruits[0]에서 상수공간의 a, p, p, l, e 전부 주소값으로 생각함.
p = fruits; // 문제가 있을까?
없다. 포인터 배열에는 안에서 주소값이 있음.