char c1;
char c2 = 'a';  // 'a' 작은 따옴표는 아스키 코드값으로 변환시켜주는 역할. 실제로는 숫자 값(97)이 들어감.
char c4 = "abcd";   // = "abcd" 는 abcd를 텍스트 공간(상수 공간)에 만들고 그 주소를 넘겨주는 역할을 함. c4는 1byte 짜리이므로 불가능.
char c3 = "a";  // c4와 같은 현상. 문자열을 넘겨주려 하니 불가능. (주소는 4byte) 동작은 하나 잘못된 것임.
''는 아무것도 없는데 이에 해당하는 아스키코드 값이 없으므로 불가능, ""는 마지막에 NULL이 자동으로 들어가므로 가능.
warning 작동은 되는데 경고 - error 작동 불가능

char c1 = 1, c2 = 'a';
char c3 = "a", *c4 = "abcd";
char *c5 = "ABCD", c6 = 1;

c1 = "a";
c4[4] = 1;  // 텍스트 공간은 read only. 변경 불가능
c5[1] = 'X';

char ca2[5] = {'a', 'b', 'c', 'd', 'e'};    // 5개 딱맞음. 하지만 끝에 NULL이 없어 string 관련 함수를 사용할 수 없다. (사용은 가능하나 의도한 값이 나오지 않음)
char ca3[5] = {'a', 'b', 'c', 'd', 'e', 'f'};    // c언어 설계 나름. 하지만 error가 날 것임.
char ca4[] = {'a', 'b', 'c', 'd', 'e'};    // ca4[5]와 같음.
char ca5[5] ="abcd";    // 마지막에 NULL이 들어감. 텍스트 공간의 이미 만들어진 string의 복사본을 전달함. (주소를 전달하는 것이 아님)
char ca6[] = "abcd";    // ca6[5]와 같음. NULL이 자동으로 들어감.
char ca7[]; // error. 배열의 크기를 지정해야 함. 컴퓨터는 절대 부정을 정의할 수 없음.
char ca8[5] = "abcdef"; // 5개만 복사가 될 것임.

대부분의 주소는 4byte. 주소는 1byte 단위.

char *cp1;  // 4byte 크기의 포인터 변수 생성
char *cp2 = "abcde";    // 4byte 크기의 포인터 변수 생성, "abcde"의 주소를 전달함. (텍스트 공간의 주소를 전달함) = 문자 a의 시작 주소
char *cp3 = {'a', 'b', 'c', 'd', 'e'};  // error. 포인터 변수는 주소를 전달해야 함. 배열은 주소를 전달할 수 없음.
char *cp4 = ""; // 쌉able. NULL 이 존재하기 때문
char *cp5 = ''; // error. ''는 아무것도 없는데 이에 해당하는 아스키코드 값이 없으므로 불가능.
char *cp6 = 'a';    // 'a' = 97. 97이라는 주소값을 전달.
char *cp7 = (char *)100;    // 100이라는 주소값을 전달. 물론 warning이 뜸

main(void) {
    char a = 'a', b = 'b', c = 'c';
    char *aa = "aaa";
    char ab[] = "bbb";

    test(a, aa, ab);
}

void test(char a, char *aa, char *ab) {
    //test(char a, char *aa, char ab[]) 와 동일하다.

    printf("%c %s %s", a, aa, ab);
}

call by value 와 call by reference 의 차이를 알아야 한다.

strlen() 함수를 만들어 보자 // 문자열 함수

숙제 : strcpy(char *, char*), strcat(char *, char *), strstr(char *, char *) 함수를 만들어 보자.
