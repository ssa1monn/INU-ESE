배열만 가지고는 저장하는 데이터 값을 변경할 수 없다

! 포인터 변수 (Pointer)
 - Pointer 변수는 메모리의 번지(주소)를 저장하는데 쓰이는 변수

 포인터 변수가 저장하고 있던 값을 바꾼다는 것은 가리키는 메모리 위치를 변경한다는 의미

 컴퓨터에서 모든 데이터는 바이트 단위로 주소를 가지고 있다
 따라서 저장되는 주소는 바이트의 주소

 그러나, 그 주소로부터 1바이트, 2바이트, 4바이트 등이 하나의 데이터일 수 있다
 그것을 구분해주는 것이 포인터 변수의 형(type), 즉 char, short, int 등 이다

 char : 시작 1000번지, 끝 1000번지
 int : 시작 1000번지, 끝 1003번지
 sizeof로 확인해 볼 수 있다

! 포인터 변수는 왜 필요한가?
 - 프로그램에는 데이터가 반드시 필요
 - 데이터는 하나의 정해진 값만 저장하는 것이 아니라, 필요에 따라 그 값을 변경하여 저장
 - 데이터들을 필요에 따라 가리키고, 변경시키고 하는 등의 처리를 할 필요성이 있다
 
 특히, 메모리를 직접 가리키고 처리할 수 있는 C언어는 그런 용도의 요구가 아주 많다

! 포인터 변수의 선언
 - 일반 변수의 선언과 같으나 변수 앞에 *을 붙인다
 - *은 1개 이상 붙일 수 있다

 int *p : 정수형(int) 변수의 주소에 대한 포인터 변수 p의 선언
 char *p : 문자형(char) 변수의 주소에 대한 포인터 변수 p의 선언

 p : 포인터 변수가 담고 있는 주소
 *p : 포인터 변수가 담고 있는 주소에 있는 값
 &p : 포인터 변수의 주소

 변수의 타입에 따라 별개의 포인터 변수를 사용해야 한다
 
 변수의 사이즈가 굉장히 중요하다
 int 일경우 포인터 변수 + 1 은 4 차이, char 일경우 포인터 변수 + 1 은 1 차이

 포인터 변수는 각 데이터 타입별로 있다

 struct와 같이 사용자가 지정한 임의의 크기를 가지는 메모리도 포인터로 가리키고 연산할 수 있다

 포인터를 사용하면서 해당 포인터가 정확하게 무엇을, 어디까지 가리키는지를 알아야 + - 연산을 정확하게 할 수 있다

 메모리를 가리킴으로써 생기는 다양한 효과를 이해해야 한다
 사용하는 능력에 따라 위험할수도, 유용할수도 있다

! 포인터 변수의 초기화
 - int *p, i : 정수 포인터 변수 p와 정수변수 i의 선언
 - p = 0 : p에 0번지를 넣는다
 - p = NULL : =0번지, 보통 초기화 할 때 사용, 지정하지 않았다는 뜻
 - p = &i : p에 i의 주소값을 넣는다
 - p = (int *) 1776 : p에 정수상수 1776 을 정수 포인터로 변환한 값을 넣는다, 즉 주소 1776번지를 넣음

 임베디드 시스템에서는 특정한 주소에 값을 넣는 일이 많음, 따라서 p = (int *) 1776 과 같은 형식의 포인터를 자주 사용함
 윈도우와 같은 pc환경에서는 권장하지 않음(그 주소에 어떤 역할을 하는 값이 들어가있는지 모르기 때문)

 & 연산자는 변수의 주소(번지)를 돌려주는 연산자이다, 단항 연산자임
 비교 연산자 & 는 이항 연산자로, 앞 뒤 값 두개가 존재해야 함

 포인터에서 데이터의 단위 크기가 굉장히 중요함을 상기하라

! Type cast(형변환)
 - 데이터 타입의 변환
 (float) i : 원래 i 변수를 float 형의 변수로 변환, 원래 값이 int 형의 3 이였다면 float 형의 3.0 으로 변환

 (float) result = (int) 39 / (int) 6
 int끼리의 나누기 연산이 먼저, 따라서 대입연산자 기준 우항은 6이 나옴
 이후 6을 float 형으로 자동 형변환, 6.0을 result에 대입하게 됨

 (float) result = (int) 39 / (float) 6 또는
 (float) result = (float) 39 / (int) 6 의 경우에는
 나누기 연산을 할 때 int 형이 float 형으로 자동 형변환, 따라서 6.5가 결과로 나옴

!!! 배열과 포인터의 관계
 int a[100]
 위의 선언은 a[0]~a[99]의 정수 100개의 배열에 대한 선언
 위의 a는 주소(pointer)이며 배열의 첫 번째 원소 a[0]의 주소를 나타낸다
 a가 첫번째 "큰 덩어리"의 주소라고 기억

 a는 주소 상수와 같음
 소스를 벗어나게 되면 존재하지 않는 것, 변수처럼 따로 저장되지 않는다
 컴파일하게 되면 a는 그 주소로 대체된다

 a[100]도 값을 읽을 수 있다, C언어는 이를 제한하지 않음
 a는 a[0]~a[99]까지의 100개만 유의미하게 관리하며, a[100]의 위치는 접근할 수 있게 해주지만 그 값에 대해서는 책임지지 않음
 원래 인덱스를 초과한 곳에 값을 쓰게 되면 그 주소에 있는 다른 배열의 값이 변경될 수도 있음

 집의 울타리 개념이라 생각해보자
 a[0]~a[99]는 내 집의 울타리 안쪽, 내가 볼 수 있고 관리할 수 있음
 하지만 a[100]은 울타리 바깥쪽, 내가 볼 수 있지만 내 소유는 아님

 int a[100], int *iptr
 iptr은 int pointer type 변수
 iptr = a : a의 값(주소 상수)을 iptr에 넣는다
 *iptr : iptr 주소에 있는 값, 즉 a[0]의 변수값 (a는 배열의 첫번째 요소의 주소를 담고 있기 때문)

 iptr은 변수를 만든것이기 때문에 저장이 됨

 *iptr은 a[0] 이다
 정확하게, a[0] 는 *(ipty + 0) 이다
 
 C언어에서 []은 연산자이다
 []와 *( + )는 완전히 동일한 의미이고, 여기서 +는 더하기가 아니라 "다음"의 의미이다
 iptr은 int pointer이기 때문에 iptr + 1은 1001이 아닌 sizeof(int)인 4를 더한 1004
 따라서 *(iptr + 1) 과 a[1] 는 같다

 a[3] = *(a + 3)
 그렇다면 *(3 + a) = 3[a] 인가? 연산자이기에 같다, a[3] 과 3[a] 는 같다
 그렇다면 a[-2] = *(a - 2), *(-2 + a) = -2[a] 는 될까? 가능하다