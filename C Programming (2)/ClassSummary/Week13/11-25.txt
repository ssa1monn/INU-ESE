! 구조체

구조체 변수의 선언

struct 구조체명칭 {
    멤버변수 1;
    멤버변수 2;
} 구조체 변수명;

또는

struct 구조체명칭 {
    멤버변수 1;
    멤버변수 2;
};

struct 구조체명칭 구조체 변수명 로 선언

-

struct address{
    char name[20];
    char phone[20];
    char address[100];
} myAddress;
구조체를 만듬과 동시에 변수를 선언(메모리에 공간 할당)

struct address{
    char name[20];
    char phone[20];
    char address[100];
}

struct address myAddress;
구조체를 만들고 나중에 변수를 선언

-

! 도트 연산자
구조체변수명.멤버변수

struct address{
    char name[20];
    char phone[20];
    char address[100];
} 

struct address myAddress;

Address.name = "홍길동";

-

! 구조체 변수의 치환

struct type {
    int a;
    float f;
} var1, var2;

var1.a = 10;
var1.f = 3.14;
var2 = var1; // var2.a = 10, var2.f = 3.14 한번에 복사 가능.
같은 구조체끼리 할당문은 가능하지만, 비교문은 불가능.

배열의 함수 인자 전달
 -> 배열의 시작주소 전달(모든 데이터를 한번에 넘겨줄 수 없음)

구조체 멤버의 함수 인자 전달
 -> 구조체 멤버의 모든 데이터를 한번에 넘겨질 수 있음

-

! 구조체 변수의 초기화

struct type {
    int a;
    float f;
} var1 = {10, 3.14};

struct type var2 = {10, 3.14};

-

! 구조체 변수의 메모리 할당

struct birthday {
    int year;
    int month;
    int day;
    char calendar;
} kim;

sizeof(kim) = 16
13이 아닌 이유? 패딩 (Padding)
char를 int라고 생각하고 4바이트씩 할당하기 때문에 16바이트가 할당됨.

#pragma pack(1) // Padding의 기준 바이트 단위 조절

struct birthday {
    int year;
    int month;
    int day;
    char calendar;
} kim;

sizeof(kim) = 13

struct tmp {
    char a;
    char b;
    char c;
    char d;
    double w;
    double x;
    double y;
    double z;
}

sizeof(tmp) = 40
char 4개(총 4바이트) 를 double 한개(총 8바이트)에 사용

struct tmp {
    char a;
    double w;
    char b;
    double x;
    char c;
    double y;
    char d;
    double z;
}

sizeof(tmp) = 64;

-

! 구조체 배열

struct book {
    char title[20];
    char author[20];
    int price;
} book[3];

book[1].price = 10000;
book[2].title[1] = 'a';

-

! 구조체 포인터

구조체에 대한 포인터 (주소만 만듬, 4바이트가 만들어짐)

struct type {
    int a;
    float f;
} *ptr;

struct type *ptr;

구조체 사용 불가. 메모리 할당이 되어있지 않음

사용하려면 반드시
struct type var;
ptr = &var;

-

! 간접 참조 연산자

구조체 포인터를 통한 구조체 원소에 접근
구조체 포인터 변수명 -> 구조체 멤버변수
ptr -> a = 10;

멤버 연산자를 사용하려면
(*ptr).a = 10;

struct list{
    int kor;
    int math;
} a = {90, 95}, *p;

p = &a;

p->kor;     // =(*p).kor, 90
p->math;    // =(*p).math, 95

-

! 중첩된 구조체
구조체의 원소가 또 다른 구조체

-

! 자기 참조 구조체

struct list {
    char name[10];
    char gender;
    int age;
    struct list *next;
}

-

! 비트 필드 구조체

구조체의 원소들을 비트들로 지정한다.

struct bit_field {
    unsigned int p : 1;
    unsigned int none : 1;
    unsigned int ov : 1;
    unsigned int rs : 2;
    unsigned int dummy : 8;
} PSW

4 바이트의 메모리를 사용하지만, 1바이트만 사용 (int형)

PSW.dummy = 0;
PSW.p = 1;
PSW.rs = 3;

이름없는 필드
struct bit_field {
    unsigned first : 1;
    unsigned : 6;
    unsigned last : 1;
};

활용
struct type {
    unsigned char first : 4;
    unsigned char second : 3;
    // unsigned char : 1; // 1바이트를 채우기 위해 사용
    unsigned char last : 8;
}

0 비트 필드
struct type {
    unsigned first : 4;
    unsigned : 0;
    unsigned : 6;
    unsigned last : 1;
}

비트 필드는 flag 에 주로 사용
struct telemetry {
    unsigned fuel : 1;
    unsigned radio : 1;
    unsigned tv : 1;
    unsigned water : 1;
    unsigned food : 1;
    unsigned waste : 1;
};

! 구조체와 함수

sturct score {
    char name[10];
    int kor;
    int eng;
} me;

함수를 선언할 때
void func(struct score s);
func(me);

void func(struct score *s);
func(&me);

void func(char *name);
func(&me.name);